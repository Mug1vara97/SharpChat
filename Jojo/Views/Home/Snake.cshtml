<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Snake Game</title>
    <style>
        #gameCanvas {
            border: 1px solid black;
        }

        #gameOver {
            display: none;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(255, 255, 255, 0.8);
            padding: 20px;
            border: 1px solid black;
            z-index: 1;
        }

        .search-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background-color: #0056b3;
            align-items: center;
            z-index: 9999;
            display: flex;
        }

        .search {
            margin-left: 20px;
            height: 15px;
            width: 80%;
        }


        .dark-mode ul {
            list-style-type: none;
            padding: 0;
            margin-top: 80px;
        }

        .dark-mode li {
            padding: 10px;
            border-bottom: 1px solid #555;
        }

        .dark-mode button {
            background-color: #555;
            color: #fff;
            padding: 5px 10px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }

            .dark-mode button:hover {
                background-color: #777;
            }

        .dark-mode a {
            color: #007bff;
        }

            .dark-mode a:hover {
                text-decoration: underline;
            }

        .dark-mode .search-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            align-items: center;
            z-index: 9999;
            display: flex;
            background-color: #555;
        }

        .dark-mode .search {
            margin-left: 20px;
            height: 15px;
            width: 80%;
        }


        .game {
            margin-top: 100px;
            float: left;
        }

        .test {
            margin-left: 1000px;
            margin-right: 30px;
            margin-top: 100px;

        }

    </style>
</head>
<body>
    <div class="search-container">
        <h4 class="name">@ViewBag.Username</h4>
        <div style="width: 26px; height: 26px; margin-left: 120px;"></div>
        <input class="search" type="text" id="searchInput" placeholder="Поиск по пользователям..." />
    </div>

    <canvas id="gameCanvas" width="800" height="600" class="game"></canvas>
    <div id="gameOver">
        <h1>Game Over!</h1>
        <div id="stats">
            <h2>Snake Stats:</h2>
            <p>Length: <span id="snakeLength"></span></p>
            <input type="hidden" id="snakeLengthInput" />
        </div>

        <button onclick="restartGame()">Restart</button>
    </div>
    <div class="test">
    <h1>Top Players</h1>

    <table>
        <thead>
            <tr>
                <th>Username</th>
                <th>Score</th>
                <th>Date Played</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in Model)
            {
                <tr>
                    <td>@player.Username</td>
                    <td>@player.Score</td>
                    <td>@player.DatePlayed</td>
                </tr>
            }
        </tbody>
    </table>
    </div>

    <script src="~/js/theme.js"></script>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const gameOver = document.getElementById('gameOver');

        const TILE_SIZE = 20;

        let snake = [
            { x: 10, y: 10 },
            { x: 10, y: 11 },
            { x: 10, y: 12 }
        ];

        let apple = { x: 15, y: 15 };


        let direction = 'up';
        let gamePaused = false;


        function drawSnake() {
            snake.forEach((segment, index) => {
                ctx.strokeStyle = 'black';
                ctx.lineWidth = 2;

                if (index === 0) {
                    // Голова змейки
                    ctx.fillStyle = 'green';
                    ctx.fillRect(segment.x * TILE_SIZE, segment.y * TILE_SIZE, TILE_SIZE, TILE_SIZE, 10);

                    // Глаза
                    ctx.fillStyle = 'black';
                    ctx.beginPath();
                    ctx.arc((segment.x * TILE_SIZE) + TILE_SIZE / 3, (segment.y * TILE_SIZE) + TILE_SIZE / 3, TILE_SIZE / 6, 0, 2 * Math.PI);
                    ctx.fill();
                    ctx.beginPath();
                    ctx.arc((segment.x * TILE_SIZE) + (2 * TILE_SIZE / 3), (segment.y * TILE_SIZE) + TILE_SIZE / 3, TILE_SIZE / 6, 0, 2 * Math.PI);
                    ctx.fill();
                } else {
                    // Тело змейки
                    ctx.fillStyle = 'green';
                    ctx.fillRect(segment.x * TILE_SIZE, segment.y * TILE_SIZE, TILE_SIZE, TILE_SIZE, 10);
                }

                // Рисуем обводку для каждого сегмента змейки
                ctx.strokeRect(segment.x * TILE_SIZE, segment.y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
            });
        }



        function updateStats() {
            document.getElementById('snakeLength').textContent = snake.length;
        }

        function updateSnake() {
            const head = { ...snake[0] };
            switch (direction) {
                case 'up':
                    head.y--;
                    break;
                case 'down':
                    head.y++;
                    break;
                case 'left':
                    head.x--;
                    break;
                case 'right':
                    head.x++;
                    break;
            }

            snake.unshift(head);
            if (head.x !== apple.x || head.y !== apple.y) {
                snake.pop();
            } else {
                generateApple();
                updateStats();
            }
        }

        function gameLoop() {
            if (checkCollision()) {
                gameOver.style.display = 'block';
                return;
            }

            ctx.clearRect(0, 0, canvas.width, canvas.height);

            updateSnake();
            drawSnake();
            drawApple();

            setTimeout(gameLoop, 100);
        }


        function checkCollision() {
            const head = snake[0];
            if (head.x < 0 || head.x >= canvas.width / TILE_SIZE ||
                head.y < 0 || head.y >= canvas.height / TILE_SIZE) {
                return true;
            }

            for (let i = 1; i < snake.length; i++) {
                if (head.x === snake[i].x && head.y === snake[i].y) {
                    return true;
                }
            }

            if (head.x === apple.x && head.y === apple.y) {
                snake.unshift({ x: head.x, y: head.y });
                generateApple();
            }

            return false;
        }

        function generateApple() {
            apple.x = Math.floor(Math.random() * (canvas.width / TILE_SIZE));
            apple.y = Math.floor(Math.random() * (canvas.height / TILE_SIZE));
        }


        function restartGame() {
            let username = '@ViewBag.Username';

            let data = { username: username, score: snake.length, datePlayed: new Date() };

            fetch('/Home/SaveSnakeGameStats', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    }
                    throw new Error('Network response was not ok.');
                })
                .then(data => {
                    console.log('Snake game stats saved successfully:', data);
                })
                .catch(error => {
                    console.error('There was a problem saving the snake game stats:', error);
                });

            snake = [{ x: 10, y: 10 }, { x: 10, y: 11 }, { x: 10, y: 12 }];
            direction = 'up';
            gameOver.style.display = 'none';

            generateApple();
            updateStats();
            gameLoop();
        }



        document.addEventListener('keydown', (event) => {
            switch (event.key) {
                case 'ArrowUp':
                case 'w':
                    if (direction !== 'down') direction = 'up';
                    break;
                case 'ArrowDown':
                case 's':
                    if (direction !== 'up') direction = 'down';
                    break;
                case 'ArrowLeft':
                case 'a':
                    if (direction !== 'right') direction = 'left';
                    break;
                case 'ArrowRight':
                case 'd':
                    if (direction !== 'left') direction = 'right';
                    break;
            }
        });

        function drawApple() {
            ctx.fillStyle = 'red';
            ctx.fillRect(apple.x * TILE_SIZE, apple.y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
        }


        gameLoop();

    </script>
</body>
</html>