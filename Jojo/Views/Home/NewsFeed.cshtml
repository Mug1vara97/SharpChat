﻿
<!DOCTYPE html>
<html>
<head>
    <title>News Feed</title>
    <style>
        .modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #fff;
            padding: 20px;
            border: 1px solid #ccc;
            z-index: 9999;
            width: 400px;
            height: 300px;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            overflow: hidden;
        }

        h2 {
            text-align: center;
            color: #333;
        }

        p {
            color: #555;
        }

        ul {
            list-style-type: none;
            padding: 0;
            height: calc(85vh - 20px);
            overflow-y: auto;
            overflow-x: hidden;
        }

        li {
            background-color: #fff;
            padding: 10px;
            margin: 10px 10px 10px 0;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-left: 150px;
            margin-right: 150px;
        }

        h3 {
            color: #333;
        }

        small {
            color: #888;
        }

        button {
            background-color: #007bff;
            color: #fff;
            padding: 5px 10px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }

            button:hover {
                background-color: #0056b3;
            }

        input, textarea {
            width: 100%;
            padding: 5px;
            margin: 5px 0;
            border: 1px solid #ccc;
            border-radius: 3px;
        }


        #createNewsButton {
            float: right;
            margin-right: 20px;
            margin-top: -10px;
        }

        p.content {
            word-wrap: break-word;
        }

        .photo {
            display: block;
            margin: 0 auto;
        }

        .search-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background-color: #555;
            align-items: center;
            z-index: 9999;
            display: flex;
        }

        .search {
            margin-left: 20px;
            height: 15px;
            width: 80%;

        }

        .options-menu {
            display: none;
            position: absolute;
            background-color: #fff;
            padding: 5px;
            border: 1px solid #ccc;
            z-index: 9999;
            width: 130px;
            margin-top: -10px;
        }

            .edit-icon:hover + .options-menu,
            .options-menu:hover {
                display: block;
                margin-top: -10px;
            }

        .zxc {
            float: right;
        }

        .dark-mode body {
            background-color: #333;
        }

        .dark-mode h2 {
            color: #fff;
        }

        .dark-mode p {
            color: #ccc;
        }

        .dark-mode ul {
            border-color: #555;
        }

        .dark-mode li {
            background-color: #555;
            border-color: #999;
            color: #fff;
        }

        .dark-mode h3 {
            color: #fff;
        }

        .dark-mode small {
            color: #ccc;
        }

        .dark-mode button {
            color: #fff;
            background-color: #333;
        }

            .dark-mode button:hover {
                background-color: #555;
            }

        .dark-mode .content {
            color: #ccc;
        }

        .dark-mode .photo {
            border: 1px solid #ccc;
        }

        .comments-container {
            max-height: 140px;
            overflow-y: auto;
            padding: 10px;
            margin-top: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
    </style>
    <link rel="stylesheet" href="~/css/theme.css">
</head>
<body>

    @model List<NewsFeedItem>

    <div class="search-container">
        <h4 class="name">@ViewBag.Username</h4>
        <img src="~/css/plus.png" onclick="openCreateNewsModal()" style="width: 26px; height: 26px; margin-left: 120px;" />
        <input class="search" type="text" id="searchInput" placeholder="Поиск новостей..." oninput="searchNews()" />
    </div>

    <p style="margin-top: 60px;"></p>

    @if (Model != null)
    {
        <ul>
            @foreach (var item in Model)
            {
                <li>
                    <h3>
                        @item.Title
                        <div class="zxc">
                            @if (item.Author == ViewBag.Username)
                            {
                                <img src="~/css/3set.png" class="edit-icon" onmouseover="showEditOptions(this)" />
                                <div class="options-menu">
                                    <button class="delete-button" onclick="deleteNews(@item.Id)">Удалить</button>
                                    <button class="edit-button" onclick="editNews(@item.Id)">Редактировать</button>
                                </div>

                            }
                        </div>
                        <button class="repost-button" onclick="openRepostModal(@item.Id)">Repost</button>
                        <input type="hidden" id="repostNewsId" value="0" />

                        <div id="repostModal" class="modal" style="display: none;">
                            <h1>Выберите чат для репоста новости</h1>
                            <ul>
                                @foreach (var chat in ViewBag.Chats)
                                {
                                    <li>
                                        <button class="repost-chat-button" onclick="repostToChat(@chat.Id)">Repost to @chat.Name</button>
                                    </li>
                                }
                            </ul>
                        </div>

                        @if (item.Likes.Any(l => l.Username == ViewBag.Username))
                        {
                            <button class="unlike-button" onclick="unlikeNews(@item.Id)" data-newsItemId="@item.Id">Unlike</button>
                        }
                        else
                        {
                            <button class="like-button" onclick="likeNews(@item.Id)" data-newsItemId="@item.Id">Like</button>
                        }
                        <span id="likesCount_@item.Id">@item.Likes.Count</span>

                    </h3>
                    @if (string.IsNullOrEmpty(item.ContentType))
                    {
                        <p class="content">@item.Content</p>
                    }
                    else
                    {
                        <img class="photo" src="data:@item.ContentType;base64,@Convert.ToBase64String(item.Photo)" alt="@item.Title" style="max-width: 90%;" />
                        <p class="content">@item.Content</p>
                    }
                    @if (item.Comments != null)
                    {
                        <div>
                            <h4>Comments:</h4>
                            <div class="comments-container">
                                <ul>
                                    @foreach (var comment in item.Comments)
                                    {
                                        <li>
                                            <small>@comment.PostedDate.ToLocalTime() by @comment.Author</small>
                                            <p>@comment.Content</p>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    }

                    <form id="addCommentForm_@item.Id" onsubmit="addComment(@item.Id)">
                        <input type="hidden" name="newsItemId" value="@item.Id" />
                        <input type="hidden" name="username" value="@ViewBag.Username" />
                        <input type="text" name="content" />
                        <button type="submit">Add Comment</button>
                    </form>
                    <small>
                        @item.PostedDate.ToLocalTime() @item.Author
                    </small>
                </li>
            }
        </ul>
    }
    else
    {
        <p>No news feed items available</p>
    }



    <div id="createNewsModal" class="modal" style="display: none;">
        <h1>Создание новости</h1>
        <form id="createNewsForm" method="post" action="/Home/CreateNews">
            <input type="hidden" name="username" value="@ViewBag.Username" />
            <label>Title:</label><br />
            <input type="text" name="title" /><br />
            <label>Content:</label><br />
            <textarea name="content"></textarea><br />
            <label>Photo:</label><br />
            <input type="file" name="photo" accept="image/*" onchange="previewPhoto(event)" /><br />
            <img id="photoPreview" src="#" alt="Photo Preview" style="display:none; height:100px;" /><br />
            <button type="submit">Create News</button>
        </form>
    </div>
    <div id="editNewsModal" class="modal" style="display: none;">
        <h1>Редактирование новости</h1>
        <form id="editNewsForm" method="post" action="/Home/EditNews">
            <input type="hidden" name="newsId" id="editNewsId" />
            <input type="hidden" name="username" value="@ViewBag.Username" />
            <label>Title:</label><br />
            <input type="text" name="title" id="editNewsTitle" /><br />
            <label>Content:</label><br />
            <textarea name="content" id="editNewsContent"></textarea><br />
            <button type="submit">Save News</button>
        </form>
    </div>

    <script src="/js/theme.js"></script>
    <script>
        function openCreateNewsModal() {
            document.getElementById('createNewsModal').style.display = 'block';
        }

        document.getElementById('createNewsForm').addEventListener('submit', function (event) {
            event.preventDefault();

            let formData = new FormData(this);

            fetch('/Home/CreateNews', {
                method: 'POST',
                body: formData
            })
                .then(response => {
                    if (response.ok) {
                        fetch('/Home/NewsFeed?username=' + formData.get('username'))
                            .then(response => response.text())
                            .then(data => {
                                document.body.innerHTML = data;
                            });
                    }
                });

            document.getElementById('createNewsModal').style.display = 'none';
        });

        document.addEventListener('keydown', function (event) {
            if (event.key === "Escape") {
                document.getElementById('createNewsModal').style.display = 'none';
            }
        });

        function deleteNews(newsItemId) {
            fetch('/Home/DeleteNews?newsItemId=' + newsItemId, {
                method: 'POST'
            })
                .then(response => {
                    window.location.reload();
                });
        }
        function editNews(newsItemId) {
            fetch('/Home/GetNews?id=' + newsItemId)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('editNewsId').value = data.id;
                    document.getElementById('editNewsTitle').value = data.title;
                    document.getElementById('editNewsContent').value = data.content;
                    document.getElementById('editNewsModal').style.display = 'block';
                });
        }

        document.getElementById('editNewsForm').addEventListener('submit', function (event) {
            event.preventDefault();

            let formData = new FormData(this);

            fetch('/Home/EditNews', {
                method: 'POST',
                body: formData
            })
                .then(response => {
                    if (response.ok) {
                        window.location.reload();
                    }
                });

            document.getElementById('editNewsModal').style.display = 'none';
        });

        document.addEventListener('keydown', function (event) {
            if (event.key === "Escape") {
                document.getElementById('editNewsModal').style.display = 'none';
            }
        });
        function previewPhoto(event) {
            var input = event.target;
            var reader = new FileReader();
            reader.onload = function () {
                var img = document.getElementById('photoPreview');
                img.src = reader.result;
                img.style.display = 'block';
            };
            reader.readAsDataURL(input.files[0]);
        }
        function searchNews() {
            let input = document.getElementById('searchInput').value.toLowerCase();
            let newsItems = document.querySelectorAll('li');

            newsItems.forEach(function (newsItem) {
                let title = newsItem.getElementsByTagName('h3')[0].innerText.toLowerCase();
                let content = newsItem.getElementsByClassName('content')[0].innerText.toLowerCase();
                if (title.includes(input) || content.includes(input)) {
                    newsItem.style.display = 'block';
                } else {
                    newsItem.style.display = 'none';
                }
            });
        }
        function showEditOptions(icon) {
            var optionsMenu = icon.nextElementSibling;

            optionsMenu.style.display = 'block';

            function hideOptionsMenu() {
                optionsMenu.style.display = 'none';
            }

            icon.addEventListener('mouseleave', hideOptionsMenu);

            optionsMenu.addEventListener('mouseenter', function () {
                optionsMenu.style.display = 'block';
            });

            optionsMenu.addEventListener('mouseleave', hideOptionsMenu);
        }

        function addComment(newsItemId) {
            let formId = `addCommentForm_${newsItemId}`;
            let form = document.getElementById(formId);
            let formData = new FormData(form);

            fetch('/Home/AddComment', {
                method: 'POST',
                body: formData
            })
                .then(response => {
                    if (response.ok) {
                        fetch('/Home/NewsFeed?username=' + formData.get('username'))
                            .then(response => response.text())
                            .then(data => {
                                document.body.innerHTML = data;
                            });
                    }
                });

            return false;
        }


        function likeNews(newsItemId) {
            let formData = new FormData();
            formData.append('newsItemId', newsItemId);
            formData.append('username', '@ViewBag.Username');

            fetch('/Home/LikeNews', {
                method: 'POST',
                body: formData
            })
                .then(response => {
                    if (response.ok) {
                        let likesCountElement = document.getElementById(`likesCount_${newsItemId}`);
                        let currentLikes = parseInt(likesCountElement.innerText);
                        let newLikes = currentLikes + 1;
                        likesCountElement.innerText = newLikes;

                        let likeButton = document.querySelector(`button[data-newsItemId="${newsItemId}"]`);
                        likeButton.innerText = "Unlike";
                        likeButton.classList.remove('like-button');
                        likeButton.classList.add('unlike-button');
                        likeButton.setAttribute('onclick', `unlikeNews(${newsItemId})`);
                    }
                });
        }

        function unlikeNews(newsItemId) {
            let formData = new FormData();
            formData.append('newsItemId', newsItemId);
            formData.append('username', '@ViewBag.Username');

            fetch('/Home/UnlikeNews', {
                method: 'POST',
                body: formData
            })
                .then(response => {
                    if (response.ok) {
                        let likesCountElement = document.getElementById(`likesCount_${newsItemId}`);
                        let currentLikes = parseInt(likesCountElement.innerText);
                        let newLikes = currentLikes - 1;
                        likesCountElement.innerText = newLikes;

                        let unlikeButton = document.querySelector(`button[data-newsItemId="${newsItemId}"]`);
                        unlikeButton.innerText = "Like";
                        unlikeButton.classList.remove('unlike-button');
                        unlikeButton.classList.add('like-button');
                        unlikeButton.setAttribute('onclick', `likeNews(${newsItemId})`);
                    }
                });
        }
        function openRepostModal(newsId) {
            document.getElementById('repostNewsId').value = newsId;
            document.getElementById('repostModal').style.display = 'block';
        }

        function repostToChat(chatId) {
            // Получаем ID новости для репоста
            let newsId = document.getElementById('repostNewsId').value;

            // Выполняем логику репоста новости в выбранный чат
            // Тут можно отправить AJAX-запрос на сервер для добавления новости в выбранный чат

            // Закрываем модальное окно
            document.getElementById('repostModal').style.display = 'none';
        }


    </script>

</body>
</html>